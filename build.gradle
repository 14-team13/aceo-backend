// gradle build 명령어로 인해 실행되는 파일 -> gradle 명령으로 수행하는 처리는 이 파일의 내용을 바탕으로 실행됨.

// 빌드하는 동안 필요한 처리를 모아놓는 곳, Gradle이 빌드되기 전에 실행되고, dependencies와 repositories가 포함될 수 있음.
buildscript {
    // build.gradle에서 사용하는 전역 변수를 선언하는 블록
    ext {
        queryDslVersion = "5.0.0"
    }
}

// 프로젝트를 빌드하기 위한 여러가지 작업(컴파일, jar생성)을 해주는 플러그인.
plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.3'
    id 'io.spring.dependency-management' version '1.1.0'
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

// project metadata
group = 'com.aluminium'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

// gradle이 필요한 라이브러리를 자동으로 다운로드 하기위해 사용하는 저장소
repositories {
    mavenCentral() //maven 중앙 저장소
}

// 저장소에서 필요한 라이브러리를 사용하기 위한 문장
dependencies {
    //implementation: 컴파일시에 의존(사용)하는 라이브러리를 지정 -> 의존 라이브러리 수정시 본 모듈까지만 재빌드.
    //본 모듈을 의존하는 모듈은 해당 라이브러리의 api 를 사용할 수 없음.

    // basic spring managed dependency
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    //annotationProcessor: 어노테이션 관련
    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // runtimeOnly: 런타임시에만 필요한 라이브러리
    // DB
    testRuntimeOnly('com.h2database:h2')
    runtimeOnly 'com.mysql:mysql-connector-j'

    // querydsl
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    implementation "com.querydsl:querydsl-apt:${queryDslVersion}"

    // ConfigurationProperties
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    //swagger -> 버전 확인 필요
    implementation 'io.springfox:springfox-swagger2:2.9.2'
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'

    //jwt토큰 -> 버전 확인 필요
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.2'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.2'

    //test
    // 테스트 컴파일(단위테스팅)에 사용하는 라이브러리를 지정
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

/*
 * queryDSL 설정 추가
 */
// querydsl에서 사용할 경로 설정
def querydslDir = "$buildDir/generated/querydsl"
// JPA 사용 여부와 사용할 경로를 설정
querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}

// querydsl 컴파일시 사용할 옵션 설정
compileQuerydsl{
    options.annotationProcessorPath = configurations.querydsl
}
// querydsl 이 compileClassPath 를 상속하도록 설정
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom compileClasspath
}

// build 시 사용할 sourceSet 추가
sourceSets {
    main.java.srcDir querydslDir
}
